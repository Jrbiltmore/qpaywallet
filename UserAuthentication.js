# UserAuthentication.js

const bcrypt=require('bcrypt');class UserAuthentication{constructor(t,e){this.userDatabase=t,this.roleDatabase=e,this.saltRounds=12}async createUser(t,e,r=['user']){const a=await this.hashPassword(e),s={username:t,password:a,roles:r};return this.userDatabase.push(s),s}async hashPassword(t){return bcrypt.hash(t,this.saltRounds)}async authenticate(t,e){const r=this.userDatabase.find(r=>r.username===t);if(!r)throw new Error('User not found');const a=await this.verifyPassword(e,r.password);if(!a)throw new Error('Incorrect password');return r}async verifyPassword(t,e){return bcrypt.compare(t,e)}async getUserRoles(t){const e=this.userDatabase.find(e=>e.username===t);return e?e.roles||[]:[]}async getAllRoles(){return this.roleDatabase}authorize(t,e){const r=t.roles||[],a=e.every(e=>r.includes(e));if(!a)throw new Error('Unauthorized')}}module.exports=UserAuthentication;
